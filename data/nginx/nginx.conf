user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;

    upstream backend {
        server  my-backend:4000;  # Docker 서비스의 이름과 포트
        keepalive 64;
    }

    server {
        listen 80;

        server_name deskdiary.store;
        location / { # "/" 도메인에 도달하면 아래의 proxy를 수행한다.
			return 301 https://deskdiary.store$request_uri;
        }
    }
    # 마지막 테스트 80포트
    # server {
    #     listen 80;
    #     server_name deskdiary.store;

    #     location / {
    #         proxy_pass http://backend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection 'upgrade';
    #         proxy_set_header Host $host;
    #         proxy_cache_bypass $http_upgrade;
    #     }

    # }

# user nginx;
# worker_processes auto;
# error_log /var/log/nginx/error.log warn;
# pid /var/run/nginx.pid;

# events {
#     worker_connections 1024;
# }

# http {
#     include /etc/nginx/mime.types;
#     default_type application/octet-stream;

#     server {
#         listen 80;
#         server_name localhost;

#         location / {
#             proxy_pass http://deskdiary-be-my-backend-1:4000;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#         }

#         location /api {
#             proxy_pass http://deskdiary-be-my-backend-1:4000/api;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#         }
#     }


    # upstream my_backend {
    #     server my-backend:3000; # 도커 컨테이너 이름과 내부 포트를 사용하세요.
    #     keepalive 64;
    # }
    # server {
    #     listen 3000; # nginx를 통해 외부로 노출되는 port.

    #     location / {
    #         proxy_pass http://my_backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }

    #     location /api {
    #         proxy_pass http://my_backend/api; # /api 경로로 들어오는 요청을 처리합니다.
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }

    #     # server_name deskdiary.store; # 도메인 이름
        
    #     # location / {
    #     #     return 301 https://$host$request_uri;
    #     # }
    # }
    server {
        listen 443 ssl;
        server_name deskdiary.store; # 도메인 이름

        location / {
            proxy_pass http://my_backend:4000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        ssl_certificate /etc/letsencrypt/live/example.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    }
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    
    keepalive_timeout 65;
    include /etc/nginx/conf.d/*.conf;
}
