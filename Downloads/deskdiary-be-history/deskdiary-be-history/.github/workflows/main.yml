# Workflow title
# 명시하지 않는 경우 파일의 경로가 타이틀이 된다.
name: deskdiary-cicd

# 이벤트
# main 브랜치에 push나 pull request가 일어난우경우
on:
  push:
    branches: ["history"]

# 이벤트가 일어나면 해야할 작업들을 명시
# 테스트, 빌드, 배포 단위로 명시
# 각각의 job은 runner라는 컨테이너에서 개별적으로 실행
jobs:
  # test code with Jest
  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./api
  #   steps:
  #     - name: Checkout Source Code
  #       uses: actions/checkout@v3
  #     - name: setup node.js 18.x
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.x
  #         cache: "npm"
  #     - name: Load env file
  #       run: |
  #         touch .env
  #         echo "MODE=${{ secrets.MODE }}" >> .env
  #         echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> .env
  #         echo "RDS_HOSTNAME=${{ secrets.RDS_HOSTNAME }}" >> .env
  #         echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
  #         echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> .env
  #         echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
  #         echo "RDS_DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
  #     - name: Install dependencies
  #       run: npm install
  #     - run: npm run test

  # Docker image build
  build:
    # build가 시작되려면 test를 완료해야함
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check DOCKERHUB_USERNAME
        run: |
          echo "DOCKERHUB_USERNAME length: ${#DOCKERHUB_USERNAME}"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      - name: variable 확인
        run: |
          echo ${{secrets.DOCKERHUB_USERNAME}}
      - name: login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest

  # ec2 환경에 배포
  deploy:
    needs: build
    runs-on: [self-hosted, label-desk]
    steps:
      - name: Pre-Fix permissions
        run: |
          sudo chown -R $(whoami) /home/ubuntu/actions-runner/my-org-runner/_work/deskdiary-be/deskdiary-be/data/certbot/www

      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          clean: false

      # .env 파일을 생성합니다.
      - name: Create .env file
        run: |
          touch .env
          echo "MODE=${{ secrets.MODE }}" >> .env
          echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> .env
          echo "RDS_HOSTNAME=${{ secrets.RDS_HOSTNAME }}" >> .env
          echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
          echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> .env
          echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
          echo "RDS_DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "KAKAO_JS_KEY=${{ secrets.KAKAO_JS_KEY }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
          echo "KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
          echo "AGORA_APP_ID=${{ secrets.AGORA_APP_ID }}" >> .env
          echo "AGORA_APP_CERTIFICATE=${{ secrets.AGORA_APP_CERTIFICATE }}" >> .env
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
          echo "API_SERVER_URL=${{ secrets.API_SERVER_URL }}" >> .env
          echo "SOCKET_SECRET_KEY=${{ secrets.SOCKET_SECRET_KEY }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env
          echo "GOOGLE_SCOPE_PROFILE=${{ secrets.GOOGLE_SCOPE_PROFILE }}" >> .env
          echo "GOOGLE_SCOPE_EMAIL=${{ secrets.GOOGLE_SCOPE_EMAIL }}" >> .env
        working-directory: ./api

      - name: Verify .env file location
        run: |
          pwd
          ls -la
        working-directory: ./api

      - name: List directory contents
        run: ls -la
        working-directory: ./api
      # Docker Compose를 이용하여 서비스를 배포합니다.
      - name: Deploy using Docker Compose
        run: |
          docker-compose down || true  # 기존에 동작 중인 컨테이너를 종료합니다.
          docker-compose pull  # DockerHub에서 최신 이미지를 가져옵니다.
          docker-compose up -d  # Docker Compose로 서비스를 백그라운드에서 실행합니다.
        working-directory: ./api
